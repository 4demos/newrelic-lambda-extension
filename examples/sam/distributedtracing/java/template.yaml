AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  newrelic-dt-example-java-sns

  Sample SAM Template for newrelic-dt-example-java-sns

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'

Globals:
  Function:
    Timeout: 30

Resources:
  JavaDtSns:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DtSnsFunction
      Handler: dtsnsexample.App::handleRequest
      Runtime: java11
      MemorySize: 512
      Environment:
        Variables:
          NEW_RELIC_ACCOUNT_ID: !Sub ${NRAccountId}
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Sub ${NRAccountId}
      Events:
        SnsTopice:
          Type: SNS
          Properties:
            Topic: !ImportValue NewRelic-Dt-Example-Node-SnsTopic
      Layers:
        # This layer includes the New Relic Lambda Extension, a sidecar process that sends telemetry,
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicLambdaExtension:5
      Policies:
        # This policy allows the lambda to know the value of the New Relic licence key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
  Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "JavaDtSns"}]]}
      # Lambda functions will auto-create their log group on first execution, but it retains logs forever, which can get expensive.
      RetentionInDays: 7
