AWSTemplateFormatVersion: 2010-09-09
Description: Distribute Tracing examples

Parameters:
  NRAccountId:
    Type: String
    Description: Your New Relic account ID; necessary for distributed tracing.
    AllowedPattern: '[0-9]+'

Transform:
- AWS::Serverless-2016-10-31

Resources:
  SimpleQueue:
    Type: AWS::SQS::Queue

  SnsTopic:
    Type: AWS::SNS::Topic

  NodeAndSQS:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs12.x
      FunctionName: newrelic-dt-example-nodejs-sqs
      Handler: newrelic-lambda-wrapper.handler
      Environment:
        Variables:
          # For the instrumentation handler to invoke your real handler, we need this value
          NEW_RELIC_LAMBDA_HANDLER: src/handlers/sqs-payload-logger.sqsPayloadLoggerHandler
          NEW_RELIC_ACCOUNT_ID: !Sub ${NRAccountId}
          NEW_RELIC_TRUSTED_ACCOUNT_KEY: !Sub ${NRAccountId}

          SNS_TOPIC: !Ref SnsTopic

          # NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS: true
          # NEW_RELIC_EXTENSION_LOG_LEVEL: DEBUG
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SimpleQueue.Arn
      MemorySize: 128
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Layers:
        # This layer includes the New Relic Lambda Extension, a sidecar process that sends telemetry,
        # as well as the New Relic Agent for Node.js, and a handler wrapper that makes integration easy.
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:451483290750:layer:NewRelicNodeJS12X:28
      Policies:
        # This policy allows the lambda to know the value of the New Relic licence key. We need this so
        # that we can send telemetry back to New Relic
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !ImportValue NewRelicLicenseKeySecret-NewRelic-LicenseKeySecretARN
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SnsTopic.TopicName
  Logs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "NodeAndSQS"}]]}
      # Lambda functions will auto-create their log group on first execution, but it retains logs forever, which can get expensive.
      RetentionInDays: 7


Outputs:
  SnsTopicArn:
    Description: "ARN of SNS Topic"
    Value: !Ref SnsTopic
    Export:
      Name: !Sub "${AWS::StackName}-SnsTopic"
  SnsTopicName:
    Description: "Name of SNS Topic"
    Value: !GetAtt SnsTopic.TopicName
    Export:
      Name: !Sub "${AWS::StackName}-SnsTopicName"
  QueueUrl:
    Description: "URL of SQS Queue"
    Value: !Ref SimpleQueue
    Export:
      Name: !Sub "${AWS::StackName}-QueueUrl"
  QueueName:
    Description: "Name of the sqs queue"
    Value: !GetAtt SimpleQueue.QueueName
    Export:
      Name: !Sub "${AWS::StackName}-QueueName"
